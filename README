# Simplified Blockchain Implementation

This project implements a basic blockchain system with the following features:
- Block and transaction data structures
- Cryptographic hashing and signatures using OpenSSL
- Proof-of-work consensus algorithm
- Transaction validation
- Distributed ledger synchronization
- Simple smart contract execution
- Blockchain explorer and visualization
- Network simulation for multiple nodes

## Prerequisites

To build and run this project, you need:
- C++17 compatible compiler (g++ or clang++)
- OpenSSL development libraries
- pthread support

On Ubuntu/Debian, you can install the required dependencies with:
```bash
sudo apt-get update
sudo apt-get install build-essential libssl-dev
```

On MacOS with Homebrew:
```bash
brew install openssl
```

## Building the Project

1. Save the blockchain implementation to a file named `blockchain.cpp`
2. Create a Makefile using the provided content
3. Build the project:
```bash
make
```

## Running the Project

After building, run the blockchain simulation:
```bash
./blockchain
```

## Project Structure

The implementation consists of the following main components:

1. **Cryptography**: Handles digital signatures using RSA and SHA-256 hashing.
2. **MerkleTree**: Implements a Merkle tree for efficient verification of transactions.
3. **SmartContract**: A simple smart contract system with different contract types.
4. **Transaction**: Represents transfers of value between addresses with optional smart contracts.
5. **Block**: Contains multiple transactions, with cryptographic links to previous blocks.
6. **Blockchain**: Manages the chain of blocks and enforces consensus rules.
7. **Wallet**: Manages keys and creates signed transactions.
8. **Node**: Participates in the network, mining blocks and broadcasting transactions.
9. **Network**: Simulates a peer-to-peer network of blockchain nodes.
10. **BlockchainExplorer**: Provides visualization and analysis of the blockchain.

## Key Concepts Implemented

### Cryptographic Verification
- SHA-256 hashing for block and transaction integrity
- RSA digital signatures for transaction authentication
- Merkle trees for efficient transaction verification

### Consensus Mechanism
- Proof-of-work algorithm requiring a certain number of leading zeros in block hashes
- Difficulty level can be adjusted by changing the `DIFFICULTY` constant

### Transaction Validation
- Signature verification
- Balance checking
- Fee processing

### Distributed Ledger Synchronization
- Nodes can synchronize their blockchains with other nodes
- Longest chain rule for resolving conflicts

### Smart Contract Execution
- Simple smart contract types (Transfer, ConditionalTransfer, TokenCreation, Custom)
- Contract state tracking

### Blockchain Explorer
- Text-based visualization of the blockchain
- Transaction history for addresses
- Smart contract listing
- Simple ASCII-art blockchain graph generation

## Extending the Project

Here are some ways to extend this implementation:
1. Implement a proper P2P network communication using sockets
2. Add a more sophisticated smart contract language
3. Improve the consensus algorithm (e.g., implement Proof-of-Stake)
4. Create a graphical user interface for the blockchain explorer
5. Add support for light clients and SPV (Simplified Payment Verification)
6. Implement more advanced cryptographic schemes

## Notes

This is a simplified implementation for educational purposes. It demonstrates the core concepts of blockchain technology but lacks many optimizations and security features of production blockchains. The implementation is not suitable for real-world usage.